/*! \mainpage Библиотека, моделирующая работу машины Тьюринга.
 *
 * \section intro_sec Описание
 *
 * Библиотека, позволяющая реализовывать любую корректную машину Тьюринга. Для её работы требуется приложение-клиент, которое по api будет обращаться к библиотеке.
 * Для корректной работы машины Тьюринга требуется файл с системой команд.
 * Первая строка файла - используемый в машине Тьюринга входной алфавит.
 * Далее, в строках идёт система команд, представляющая собой:
 * Входное состояние_Заменяемый символ_Символ замены_Следующее состояние.
 * На вход машине Тьюринга подается строка, которая уже имеет символы пробела('_').
 * Выводит итоговую строку.
 *
 * \section intro_sec О разработке
 *
 * Библиотека разработана студентом 1 курса кафедры МОП ЭВМ, группы КТбо1-6 Кравченко Александром Андреевичем.
 * @author Кравченко Александр Андреевич
 * @date 2024.05.24
 * @version 1.0.0
 */
 /**
  * @file TuringDLL.h
  * @brief Заголовочный файл для Машины Тьюринга.
  */
#pragma once

#ifdef TURINGDLL_EXPORTS
#define TURINGDLL_API __declspec(dllexport)
#else
#define TURINGDLL_API __declspec(dllimport)
#endif

#include <vector>
#include <map>
#include <string>

  /**
   * @struct Command
   * @brief Структура для хранения системы комманд машины Тьюринга.
   */
struct TURINGDLL_API Command {
    char writeSymbol; ///< Символ, записываемый на ленту.
    char direction; ///< Направление движения головки('<' - влево, '>' - вправо).
    std::string nextState; ///< Следующее состояния для перехода.
};

/**
 * @class Tape
 * @brief Класс используемый для ленты машины Тьюринга.
 */
class TURINGDLL_API Tape {
public:
    /**
     * @brief Конструктор для Tape, использует строку-параметр initialTape
     * @param initialTape исходная строка являющаяся лентой машины Тьюринга.
     */
    Tape(const std::string& initialTape);
    /**
    * @brief Функция чтения символа, находящегося на текущей позиции головки машины Тьюринга.
    * @return Возвращает символ, находящийся на текущей позиции головки машины Тьюринга.
    */
    char read() const;
    /**
    * @brief Функция записи символа на текущую позицию головки машины Тьюринга.
    * @param symbol Символ, который требуется записать на текущую позицию головки машины Тьюринга.
    */
    void write(char symbol);
    /**
    * @brief Функция перемещения головки влево по ленте.
    *
    * Если текущее положение головки - крайнее левое(то есть её индекс равен 0, и она стоит на крайнем левом элементе ленты), то функция не перемещает головку, а 'расширяет' ленту, добавляя символ пробела('_') в качестве крайнего левого элемента. После этого головка указывает на этот элемент, тем самым моделируя расширение ленты, а также перемещение головки.
    */
    void moveLeft();
    /**
    * @brief Функция перемещения головки влево по ленте.
    *
    * Если положение головки после перемещения находится дальше крайнего правого элемента ленты(то есть индекс головки больше длины ленты), то функция  расширяет ленту, добавляя символ пробела('_') в качестве крайнего правого элемента. После этого головка указывает на этот элемент, тем самым моделируя расширение ленты, а также перемещение головки.
    */
    void moveRight();
    /**
     * @brief Функция, вывода в консоль текущего состояния ленты машины Тьюринга.
     * @param withArrow Параметр, отвечающий за вывод стрелки, указывающей текущее положение головки. Если true - выводит с положением головки. Если false - выводит без положения головки.
     */
    void print(bool withArrow) const;
    /**
     * @brief Функция 'очистки' ленты машины Тьюринга. Очищает её от символов пробела.
     */
    void clearTape();

private:
    std::vector<char> tape; ///< Массив символов ленты.
    size_t headPosition; ///< Текущее положение головки на ленте.
};

/**
 * @class TuringMachine
 * @brief Класс используемый для машины Тьюринга.
 */
class TURINGDLL_API TuringMachine {
public:
    /**
     * @brief Конструктор для класса машины Тьюринга. Использует структуру системы команд машины Тьюринга, исходное состояние машины Тьюринга, исходную ленту машины Тьюринга.
     * @param program Стурктура системы команд машины Тьюринга.
     * @param initialState Исходное состояние машины Тьюринга.
     * @param initialTape Исходная лента машины Тьюринга.
     */
    TuringMachine(const std::map<std::string, std::map<char, Command>>& program, const std::string& initialState, const std::string& initialTape);
    /**
     * @brief Функция выполнения одного шага машины Тьюринга.
     * @param isEnd Ссылка на флаг, указывающий на то, что машина находится в конечном состоянии q0, и её работу нужно прекратить.
     *
     * Первым шагом функция считывает символ, на который указывает головка машины Тьюринга. Затем, относительно текущего состояния, и текущего элемента выбирается замена текущего символа, направление сдвига головки, а также следующее состояние машины Тьюринга. После этого текущий символ заменяетя, головка передвигается, а текущее состояние заменяется следующим. Если это состояние становится q0, то есть конечным состоянием, то флаг isEnd принимает значение true.
     */
    virtual void executeStep(int& isEnd);
    /**
    * @brief Функция, моделирующая работу машины Тьюринга, запускает функцию executeStep в цикле  до того момента, пока флаг isEnd не становится true. После завершения работы очищает ленту с помощью функции clearTape.
    */
    virtual void run();
    /**
     * @brief Функция, вывода в консоль текущего состояния ленты машины Тьюринга.
     * @param withArrow Параметр, отвечающий за вывод стрелки, указывающей текущее положение головки. Если true - выводит с положением головки. Если false - выводит без положения головки.
     */
    virtual void printTape(bool withArrow) const;

private:
    std::map<std::string, std::map<char, Command>> program; ///< Система команд машины Тьюринга
    std::string currentState; ///< Текущее состояние машины Тьюринга.
    Tape tape; ///< Лента машины Тьюринга.
};
/**
 * @brief Функция загрузки системы команд машины Тьюринга из файла с расширением .turing.
 * @param filename Название загружаемого файла.
 * @param inputAlphabet Ссылка на строку, содержащую алфавит машины Тьюинга, считанную из файла.
 * @return Возвращает систему команд машины Тьюринга.
 */
extern "C" TURINGDLL_API std::map<std::string, std::map<char, Command>> loadProgram(const std::string& filename, std::string& inputAlphabet);
/**
 * @brief Функция создания(конструктор) экземпляра класса машины Тьюринга.
 * @param program Система команд машины Тьюринга.
 * @param initialState Первоначальное состояние машины Тьюринга.
 * @param initialTape Первоначальная лента машины Тьюринга.
 * @return Возвращает экземпляр машины Тьюринга.
 */
extern "C" TURINGDLL_API TuringMachine * CreateTuringMachine(const std::map<std::string, std::map<char, Command>>&program, const std::string & initialState, const std::string & initialTape);
/**
 * @brief Функция удаления(деструктор) экземпляра класса машины Тьюринга.
 * @param program Система команд машины Тьюринга.
 * @param initialState Экземпляр машины Тьюринга.
 */
extern "C" TURINGDLL_API void DestroyTuringMachine(TuringMachine * tm);
